define STDOUT 1

define ENDL
	move &R1 &SP
	push8 '\n'

	move &R2 1
	move &R3 1
	move &R4 STDOUT

	writef

	pop8
end

print-R1:               		;C void print-R1
define BUF_SIZE 32

	; create a scope
	push64 &SB
	move   &SB &SP

	add &SP BUF_SIZE

	; function parameters
	                        	;C (
	                        	;C     uint64_t p_num // -> R1
	                        	;C )
	; function body
	                        	;C {
	move &R2 &SP            	;C     char buf[32];
	sub  &R2 BUF_SIZE
	move &R3 0              	;C     uint64_t buf_size = 1;

	print-R1_loop1:         	;C     do {
		move   &R4 BUF_SIZE     ;C         buf[sizeof(buf) - buf_size - 1] = p_num % 10 + '0';
		sub    &R4 &R3
		dec    &R4
		add    &R4 &R2
		move   &R5 &R1
		mod    &R5 10
		add    &R5 '0'
		write8 &R4 &R5

		inc &R3                 ;C         ++ buf_size;

		div &R1 10              ;C         p_num /= 10;

		neq   &R1 0             ;C     } while (p_num);
		jumpt print-R1_loop1

	move &R1 &R2            	;C     fwrite(buf[sizeof(buf) - buf_size], buf_size, 1, stdout);
	add  &R1 BUF_SIZE
	sub  &R1 &R3

	move &R2 1
	; R3 is already in place
	move &R4 STDOUT

	writef
	                        	;C }
	; end the scope
	move &SP &SB

	pop64 &SB
	ret

entry:                  		;C int main(void) {
	move &R1 1024           	;C     print-R1(52);
	call print-R1

	ENDL                    	;C     putchar('\n');

	halt                    	;C     return 0;
	                        	;C };
